{"ast":null,"code":"export const BASE_URL = \"http://localhost:3001\";\nconst getResponse = res => {\n  return res.ok ? res.json() : Promise.reject(`Ошибка ${res.status}`);\n};\nexport const signup = (password, email) => {\n  return fetch(`${BASE_URL}/signup`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(password, email)\n  }).then(getResponse);\n};\nexport const signin = (password, email) => {\n  return fetch(`${BASE_URL}/signin`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(password, email)\n  }).then(getResponse);\n};\nexport const userValidation = token => {\n  return fetch(`${BASE_URL}/users/me`, {\n    method: \"GET\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${token}`\n    }\n  }).then(getResponse);\n};\nexport const saveMovie = (country, director, duration, year, description, image, trailerLink, nameRU, nameEN, thumbnail, movieId) => {\n  return fetch(`${BASE_URL}/movies`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(country, director, duration, year, description, image, trailerLink, nameRU, nameEN, thumbnail, movieId)\n  }).then(getResponse);\n};\nexport const deleteLike = id => {\n  return fetch(`${BASE_URL}/movies/${id}`, {\n    method: \"DELETE\",\n    headers: this._headers\n  }).then(this._getResponse);\n};\n\n// \"country\":\"USA/Germany/Canada\",\n//  \"director\":\"J. J. Abrams\",\n//  \"duration\":60,\n//  \"year\":\"2025\",\n//  \"description\":\"Tenant 2\",\n//  \"image\":\"https://img1.goodfon.ru/original/2880x1800/7/cb/zhivotnye-pticy-vorony-para.jpg\",\n//  \"trailerLink\":\"https://www.youtube.com/watch?v=AZGcmvrTX9M\",\n//  \"nameRU\":\"Миссия Невыполнима\",\n//  \"nameEN\":\"Mission Imposible\",\n//  \"thumbnail\":\"https://img1.goodfon.ru/original/2880x1800/7/cb/zhivotnye-pticy-vorony-para.jpg\",\n//  \"movieId\":22","map":{"version":3,"names":["BASE_URL","getResponse","res","ok","json","Promise","reject","status","signup","password","email","fetch","method","headers","body","JSON","stringify","then","signin","userValidation","token","Accept","Authorization","saveMovie","country","director","duration","year","description","image","trailerLink","nameRU","nameEN","thumbnail","movieId","deleteLike","id","_headers","_getResponse"],"sources":["/Users/alexander_sorokin/dev/diplom/test/movies-explorer-frontend/src/utils/MainApi.js"],"sourcesContent":["export const BASE_URL = \"http://localhost:3001\";\nconst getResponse = (res) => {\n  return res.ok ? res.json() : Promise.reject(`Ошибка ${res.status}`);\n};\n\nexport const signup = (password, email) => {\n  return fetch(`${BASE_URL}/signup`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify(password, email),\n  }).then(getResponse);\n};\n\nexport const signin = (password, email) => {\n  return fetch(`${BASE_URL}/signin`, {\n    method: \"POST\",\n    headers: { \"Content-Type\": \"application/json\" },\n    body: JSON.stringify(password, email),\n  }).then(getResponse);\n};\n\nexport const userValidation = (token) => {\n  return fetch(`${BASE_URL}/users/me`, {\n    method: \"GET\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${token}`,\n    },\n  }).then(getResponse);\n};\n\nexport const saveMovie = (\n  country,\n  director,\n  duration,\n  year,\n  description,\n  image,\n  trailerLink,\n  nameRU,\n  nameEN,\n  thumbnail,\n  movieId\n) => {\n  return fetch(`${BASE_URL}/movies`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n    body: JSON.stringify(\n      country,\n      director,\n      duration,\n      year,\n      description,\n      image,\n      trailerLink,\n      nameRU,\n      nameEN,\n      thumbnail,\n      movieId\n    ),\n  }).then(getResponse);\n};\n\nexport const deleteLike = (id) => {\n  return fetch(`${BASE_URL}/movies/${id}`, {\n    method: \"DELETE\",\n    headers: this._headers,\n  }).then(this._getResponse);\n};\n\n// \"country\":\"USA/Germany/Canada\",\n//  \"director\":\"J. J. Abrams\",\n//  \"duration\":60,\n//  \"year\":\"2025\",\n//  \"description\":\"Tenant 2\",\n//  \"image\":\"https://img1.goodfon.ru/original/2880x1800/7/cb/zhivotnye-pticy-vorony-para.jpg\",\n//  \"trailerLink\":\"https://www.youtube.com/watch?v=AZGcmvrTX9M\",\n//  \"nameRU\":\"Миссия Невыполнима\",\n//  \"nameEN\":\"Mission Imposible\",\n//  \"thumbnail\":\"https://img1.goodfon.ru/original/2880x1800/7/cb/zhivotnye-pticy-vorony-para.jpg\",\n//  \"movieId\":22\n"],"mappings":"AAAA,OAAO,MAAMA,QAAQ,GAAG,uBAAuB;AAC/C,MAAMC,WAAW,GAAIC,GAAG,IAAK;EAC3B,OAAOA,GAAG,CAACC,EAAE,GAAGD,GAAG,CAACE,IAAI,EAAE,GAAGC,OAAO,CAACC,MAAM,CAAE,UAASJ,GAAG,CAACK,MAAO,EAAC,CAAC;AACrE,CAAC;AAED,OAAO,MAAMC,MAAM,GAAGA,CAACC,QAAQ,EAAEC,KAAK,KAAK;EACzC,OAAOC,KAAK,CAAE,GAAEX,QAAS,SAAQ,EAAE;IACjCY,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACP,cAAc,EAAE;IAClB,CAAC;IACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACP,QAAQ,EAAEC,KAAK;EACtC,CAAC,CAAC,CAACO,IAAI,CAAChB,WAAW,CAAC;AACtB,CAAC;AAED,OAAO,MAAMiB,MAAM,GAAGA,CAACT,QAAQ,EAAEC,KAAK,KAAK;EACzC,OAAOC,KAAK,CAAE,GAAEX,QAAS,SAAQ,EAAE;IACjCY,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MAAE,cAAc,EAAE;IAAmB,CAAC;IAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACP,QAAQ,EAAEC,KAAK;EACtC,CAAC,CAAC,CAACO,IAAI,CAAChB,WAAW,CAAC;AACtB,CAAC;AAED,OAAO,MAAMkB,cAAc,GAAIC,KAAK,IAAK;EACvC,OAAOT,KAAK,CAAE,GAAEX,QAAS,WAAU,EAAE;IACnCY,MAAM,EAAE,KAAK;IACbC,OAAO,EAAE;MACPQ,MAAM,EAAE,kBAAkB;MAC1B,cAAc,EAAE,kBAAkB;MAClCC,aAAa,EAAG,UAASF,KAAM;IACjC;EACF,CAAC,CAAC,CAACH,IAAI,CAAChB,WAAW,CAAC;AACtB,CAAC;AAED,OAAO,MAAMsB,SAAS,GAAGA,CACvBC,OAAO,EACPC,QAAQ,EACRC,QAAQ,EACRC,IAAI,EACJC,WAAW,EACXC,KAAK,EACLC,WAAW,EACXC,MAAM,EACNC,MAAM,EACNC,SAAS,EACTC,OAAO,KACJ;EACH,OAAOvB,KAAK,CAAE,GAAEX,QAAS,SAAQ,EAAE;IACjCY,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACP,cAAc,EAAE;IAClB,CAAC;IACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAClBQ,OAAO,EACPC,QAAQ,EACRC,QAAQ,EACRC,IAAI,EACJC,WAAW,EACXC,KAAK,EACLC,WAAW,EACXC,MAAM,EACNC,MAAM,EACNC,SAAS,EACTC,OAAO;EAEX,CAAC,CAAC,CAACjB,IAAI,CAAChB,WAAW,CAAC;AACtB,CAAC;AAED,OAAO,MAAMkC,UAAU,GAAIC,EAAE,IAAK;EAChC,OAAOzB,KAAK,CAAE,GAAEX,QAAS,WAAUoC,EAAG,EAAC,EAAE;IACvCxB,MAAM,EAAE,QAAQ;IAChBC,OAAO,EAAE,IAAI,CAACwB;EAChB,CAAC,CAAC,CAACpB,IAAI,CAAC,IAAI,CAACqB,YAAY,CAAC;AAC5B,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}